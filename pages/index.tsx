import { useState } from "react";
import type { MouseEventHandler } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { LazyImage } from "@/components/LazyImage.tsx";

// Function to generate a random number between 1 and 123
const randomNumber = () => Math.floor(Math.random() * 123) + 1;

//Generate simple unique id
const generateId = () => Math.random().toString(36).substring(2, 9);

const Home: NextPage = () => {

  // Its nice to be explicit about the type of the state inside <>,
  // to avoid future typos. We can use <string[]> or <Array<string>> in this case.
  // const [images, setImage] = useState<string[]>([
  //   `https://randomfox.ca/images/${randomNumber()}.jpg`,
  //   `https://randomfox.ca/images/${randomNumber()}.jpg`,
  //   `https://randomfox.ca/images/${randomNumber()}.jpg`,
  //   `https://randomfox.ca/images/${randomNumber()}.jpg`,
  // ])

  // We can also create an object to define the state type in case it has multiple
  // ypes and it becomes too long
  // type ImageItems = Array<{id: string, url: string}>;
  // And we call it in the state something like  useState<ImageItems>

  // It is more common to represent the type of only one element of the array
  type ImageItem = { id: string, url: string };

  // Hook useState allows you to add state to functional components, it returns
  // an array with the current state and a function to update it. It is usefull
  // to make it easier to keep data in sync both in that component and in any child
  // components being passed data from that state.
  const [images, setImages] = useState<Array<ImageItem>>([])

  // Funciton to create a new image object and set it to the images array.
  const addNewFox: MouseEventHandler<HTMLButtonElement> = (event) => {
    // We define the type with MouseEventHandler<HTMLButtonElement> to be more precise,
    // In this case we can get the event type by hovering on the onClick method wich 
    // is what is what fires the method and returns the event. In other libraries
    // we would have to see wich file returns the type.
    // The type is mot mandatory but makes the code a bit more profesional
    event.preventDefault()
    
    // Its nice to specify the type of the variable, in this case the type is what
    // we defined in ImageItem
    const newImageItem: ImageItem = { id: generateId(), url: `https://randomfox.ca/images/${randomNumber()}.jpg` };
    setImages([...images, newImageItem]);
  }

  return (
    <div>
      <Head>
        <title>Platzi</title>
        <meta name="description" content="Generated by platzi" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main >
        <h1 className="text-3xl font-bold underline"> Hello world!</h1>
        <button onClick={addNewFox}>Add new fox!</button>
        {images.map(({ id, url }) => (
          <div key={id} className="p-4">
            <LazyImage
              src={url} 
              title="Fox image" 
              onClick={() => console.log('Click on image!')}
              onLazyLoad={() => console.log('Lazy load')}
            />
          </div>
        ))}
      </main>
      <footer >
      </footer>
    </div>
  );
}

export default Home
